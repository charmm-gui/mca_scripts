#!/usr/bin/env python
"""
Generated by CHARMM-GUI (http://www.charmm-gui.org)

openmm_run.py

This program is OpenMM running scripts written in python.

Correspondance: jul316@lehigh.edu or wonpil@lehigh.edu
Last update: March 29, 2017
"""

from __future__ import print_function
import argparse
import sys, os, re

from simtk.unit import *
from simtk.openmm import *
from simtk.openmm.app import *

_s = re.compile('\s+')

def parse_psf(psffile):
    psf = open(psffile)
    psf.readline(); psf.readline()
    ntitle = int(psf.readline().strip().split()[0])

    title = []
    for i in range(ntitle):
        title.append(psf.readline().rstrip())

    psf.readline()
    natoms = int(psf.readline().strip().split()[0])

    atoms = []
    for i in range(natoms):
        line = psf.readline()
        num, segid, resid, resname, name = _s.split(line)[1:6]
        atoms.append({'num': int(num), 'segid': segid, 'resid': int(resid), 'resname': resname, 'name': name})
    return title, atoms

def write_crd(title, psf, rst, crdfile):
    coord = rst.getPositions()
    box   = rst.getPeriodicBoxVectors()
    boxlx = box[0][0].value_in_unit(angstroms)
    boxly = box[1][1].value_in_unit(angstroms)
    boxlz = box[2][2].value_in_unit(angstroms)

    crd.write("\n".join(title))
    crd.write("\n*\n")
    crd.write("%10d  EXT\n" % len(psf))

    prev_resid = -1
    resid = 0
    for i,atom in enumerate(psf):
        if prev_resid != atom['resid']: resid += 1

        x = coord[i][0].value_in_unit(angstroms) - boxlx / 2.0
        y = coord[i][1].value_in_unit(angstroms) - boxly / 2.0
        z = coord[i][2].value_in_unit(angstroms) - boxlz / 2.0

        crd.write("  %8d  %8d  %-8s  %-8s  %18.10f  %18.10f  %18.10f  %-8s  %-8d  %18.10f\n" %
                  (atom['num'], resid, atom['resname'], atom['name'], x, y, z, atom['segid'], atom['resid'], 0.0))
        prev_resid = atom['resid']

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', dest='inpfile', help='Input OpenMM RST file', required=True)
    parser.add_argument('-p', dest='psffile', help='Input PSF file', required=True)
    parser.add_argument('-o', dest='outfile', help='Output CHARMM CRD file')
    args = parser.parse_args()

    title, psf = parse_psf(args.psffile)

    rstfile = open(args.inpfile, 'r')
    rst = XmlSerializer.deserialize(rstfile.read())

    if not args.outfile: crd = sys.stdout
    else: crd = open(args.outfile, 'w')
    write_crd(title, psf, rst, crd)

